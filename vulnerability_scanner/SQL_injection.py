from backend.database import SessionLocal
from backend.models import VulType, Payload
import requests

# Database query function to get payloads
def get_sql_injection_payloads(db):
    return db.query(Payload).filter_by(vul_type=VulType.SQL_INJECTION).all()

# requests with SQL injection payloads
def send_sql_injection_requests(db, url, parameters, headers, session):
    payloads = get_sql_injection_payloads(db)

    for payload in payloads:
        payload_value = payload.value
        data = {param: payload_value for param in parameters}
        response = session.post(url, headers=headers, data=data)
        
        # Check the response status code
        if 400 <= response.status_code < 500:
            print("false")
        elif 500 <= response.status_code < 600:
            print("true")
        else:
            print("response status code: ", response.status_code)

        #print(f"Sent payload: {payload_value}")
        #print(f"Response status code: {response.status_code}")
        #print(f"Response text: {response.text}")


# example to send paylaod
# Need Data - url / parameter / session / header
if __name__ == "__main__":
    db = SessionLocal()
    url = "http://example.com/vulnerable_endpoint"
    parameters = ["input1", "input2", "input3"]

    session = requests.Session()
    headers = {'User-Agent': 'MyUserAgent/1.0','X-Auth-Token': 'access-key'}

    send_sql_injection_requests(db, url, parameters, headers, session)

    db.close()