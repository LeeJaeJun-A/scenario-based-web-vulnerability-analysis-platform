from sqlalchemy.orm import Session
from backend.models import Result, Payloads, VulType
from sqlalchemy.exc import IntegrityError


def create_payload(db: Session, vul_type: VulType, payload: str):
    try:
        db_payload = Payloads(vul_type=vul_type, payload=payload)
        db.add(db_payload)
        db.commit()
    except IntegrityError as e:
        db.rollback()
        print(f"IntegrityError occurred: {e}")
    except Exception as e:
        db.rollback()
        print(f"An error occurred: {e}")


def get_payload(db: Session, vul_type: VulType):
    try:
        payloads = db.query(Payloads).filter(Payloads.vul_type == vul_type).all()
        return [payload.as_dict() for payload in payloads]
    except Exception as e:
        print(f"Error occurred while fetching payloads: {e}")
        return []


def delete_payload(db: Session, vul_type: VulType, payload: str):
    try:
        payload_to_delete = db.query(Payloads).filter(
            Payloads.vul_type == vul_type,
            Payloads.payload == payload
        ).one_or_none()

        if payload_to_delete:
            db.delete(payload_to_delete)
            db.commit()
            print(f"Deleted payload: {payload}")
        else:
            print(f"No payload found for vul_type: {vul_type} and payload: {payload}")

    except Exception as e:
        db.rollback()
        print(f"Error occurred while deleting payload: {e}")


def delete_all_payloads(db: Session):
    try:
        db.query(Payloads).delete(synchronize_session=False)
        db.commit()
        print("All payloads deleted")
    except Exception as e:
        db.rollback()
        print(f"Error occurred while deleting all payloads: {e}")


def create_result(db: Session, url: str, vul_type: VulType, payload: str = "취약점 발견 안됨", part: str = None):
    try:
        new_result = Result(url=url, vul_type=vul_type, payload=payload, part=part)
        db.add(new_result)
        db.commit()
    except IntegrityError as e:
        db.rollback()
        print(f"IntegrityError occurred: {e}")
    except Exception as e:
        db.rollback()
        print(f"An error occurred: {e}")


def get_results(db: Session, main_url: str):
    try:
        results = db.query(Result).filter(Result.url.contains(main_url)).all()
        return [result.as_dict() for result in results]
    except Exception as e:
        print(f"Error occurred while fetching results: {e}")
        return []


def delete_all_results(db: Session, main_url: str):
    try:
        db.query(Result).filter(Result.url.contains(main_url)).delete(synchronize_session=False) # 함수 실행 후 session 새로 열어야 함
        db.commit()
    except Exception as e:
        db.rollback()
        print(f"Error occurred: {e}")