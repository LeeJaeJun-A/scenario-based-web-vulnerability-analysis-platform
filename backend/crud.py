from sqlalchemy.orm import Session
from backend.models import Result, Payloads, VulType
from sqlalchemy.exc import IntegrityError


def create_payload(db: Session, vul_type: VulType, payload: str):
    try:
        db_payload = Payloads(vul_type=vul_type, payload=payload)
        db.add(db_payload)
        db.commit()
    except IntegrityError as e:
        db.rollback()
        print(f"IntegrityError occurred: {e}")
    except Exception as e:
        db.rollback()
        print(f"An error occurred: {e}")


def get_payload(db: Session, vul_type: VulType):
    try:
        payloads = db.query(Payloads).filter(Payloads.vul_type == vul_type).all()
        return [payload.as_dict() for payload in payloads]
    except Exception as e:
        print(f"Error occurred while fetching payloads: {e}")
        return []


def create_result(db: Session, url: str, vul_type: VulType, payload: str = "취약점 발견 안됨"):
    try:
        new_result = Result(vul_type=vul_type, payload=payload, url=url)
        db.add(new_result)
        db.commit()
    except IntegrityError as e:
        db.rollback()
        print(f"IntegrityError occurred: {e}")
    except Exception as e:
        db.rollback()
        print(f"An error occurred: {e}")


def get_results(db: Session, main_url: str):
    try:
        results = db.query(Result).filter(Result.url.contains(main_url)).all()
        return [result.as_dict() for result in results]
    except Exception as e:
        print(f"Error occurred while fetching results: {e}")
        return []


def delete_all_results(db: Session, main_url: str):
    try:
        db.query(Result).filter(Result.url.contains(main_url)).delete(synchronize_session=False) # 함수 실행 후 session 새로 열어야 함
        db.commit()
    except Exception as e:
        db.rollback()
        print(f"Error occurred: {e}")