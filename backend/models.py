import enum
from sqlalchemy import Column, Enum, Integer, Text, ForeignKey
from sqlalchemy import relationship
from backend.database import Base


class VulType(enum.Enum):
    ADMINISTRATOR_PAGE_EXPOSURE = 'administrator_page_exposure',
    AUTOMATED_ATTACK_VULNERABILITIES = 'automated_attack_vulnerabilities',
    BUFFER_OVERFLOW = 'buffer_overflow',
    COOKIE_MODIFICATION = 'cookie_modification',
    CSRF = 'CSRF',
    DIRECTORY_INDEXING = 'directory_indexing',
    FORMAT_STRING = 'format_string',
    INSUFFICIENT_AUTHENTICATION = 'insufficient_authentication',
    INSUFFICIENT_AUTHORIZATION = 'insufficient_authorization',
    INSUFFICIENT_SESSION_EXPIRATION = 'insufficient_session_expiration',
    LDAP_INJECTION = 'LDAP_injection',
    LOCATION_DISCLOSURE = 'location_disclosure',
    MALICIOUS_CONTENT = 'malicious_content',
    MISSING_PROCESS_VALIDATION = 'missing_process_validation',
    PLAIN_TEXT_TRANSFER = 'plain_text_transfer',
    ROUTE_TRACKING = 'route_tracking',
    RUN_OS_COMMAND = 'run_os_command',
    SESSION_FIXATION = 'session_fixation',
    SESSION_PREDICTION = 'session_prediction',
    SQL_INJECTION = 'SQL_injection',
    SSI_INJECTION = 'SSI_injection',
    SSRF = 'SSRF',
    WEAK_STRING_STRENGTH = 'weak_string_strength',
    XPATH_INJECTION = 'XPath_injection',
    XSS = 'XSS'


class LevelType(enum.Enum):
    HIGH = "상",
    MEDIUM = "중",
    LOW = "하"


class Payloads(Base):
    __tablename__ = "payloads"

    vul_type = Column(Enum(VulType), primary_key=True)
    payload = Column(Text, primary_key=True)


class Result(Base):
    __tablename__ = "result"

    id = Column(Integer, primary_key=True)
    vul_type = Column(Enum(VulType), nullable=False)
    payload = Column(Text)  # 안전할 시 payload가 없을 수 있으니 따로
    level = relationship("Level", back_populates="results", uselist=False, viewonly=True)


class Level(Base):
    __tablename__ = "vul_level"

    vul_type = Column(Enum(VulType),  ForeignKey('Result.vul_type'), primary_key=True)
    level = Column(Enum(LevelType), nullable=False)
    results = relationship("Result", back_populates="level")




