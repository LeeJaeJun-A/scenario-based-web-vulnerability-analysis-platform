import enum
from sqlalchemy import Column, Enum, Text, ForeignKey, PrimaryKeyConstraint
from sqlalchemy.orm import relationship
from backend.database import Base


class VulType(enum.Enum):
    ADMINISTRATOR_PAGE_EXPOSURE = '관리자 페이지 노출'
    AUTOMATED_ATTACK_VULNERABILITIES = '자동화 공격'
    BUFFER_OVERFLOW = 'Buffer Overflow'
    COOKIE_MODIFICATION = '쿠키 변조'
    CSRF = 'CSRF'
    DIRECTORY_INDEXING = 'Directory Indexing'
    FORMAT_STRING = 'Format String'
    INSUFFICIENT_AUTHENTICATION = '불충분한 인증'
    INSUFFICIENT_AUTHORIZATION = '불충분한 인가'
    INSUFFICIENT_SESSION_EXPIRATION = '불충분한 세션 만료'
    LDAP_INJECTION = 'LDAP Injection'
    LOCATION_DISCLOSURE = '위치 공개'
    MALICIOUS_CONTENT = '악성 콘텐츠'
    MISSING_PROCESS_VALIDATION = '프로세스 검증 누락'
    PLAIN_TEXT_TRANSFER = '데이터 평문 전송'
    ROUTE_TRACKING = '경로 추적'
    RUN_OS_COMMAND = '운영체제 명령 실행'
    SESSION_FIXATION = '세션 고정'
    SESSION_PREDICTION = '세션 예측'
    SQL_INJECTION = 'SQL Injection'
    SSI_INJECTION = 'SSI Injection'
    SSRF = 'SSRF'
    WEAK_STRING_STRENGTH = '약한 문자열 강도'
    XPATH_INJECTION = 'XPath Injection'
    XSS = 'XSS'


class LevelType(enum.Enum):
    HIGH = '상'
    MEDIUM = '중'
    LOW = '하'


VUL_TYPE_VALUES = [e.value for e in VulType]
LEVEL_TYPE_VALUES = [e.value for e in LevelType]


class Payloads(Base):
    __tablename__ = "payloads"

    vul_type = Column(Enum(VulType, values_callable=lambda obj: VUL_TYPE_VALUES), nullable=False)
    payload = Column(Text, nullable=False)

    __table_args__ = (
        PrimaryKeyConstraint('vul_type', 'payload', name='payloads_pk'),
    )

    def __init__(self, vul_type, payload):
        self.vul_type = vul_type
        self.payload = payload

    def as_dict(self):
        return {
            "vul_type": self.vul_type.value,
            "payload": self.payload
        }


class VulLevel(Base):
    __tablename__ = "vul_level"

    vul_type = Column(Enum(VulType, values_callable=lambda obj: VUL_TYPE_VALUES), primary_key=True)
    level = Column(Enum(LevelType, values_callable=lambda obj: LEVEL_TYPE_VALUES), nullable=False)
    results = relationship("Result", back_populates="level")

    def __init__(self, vul_type, level):
        self.vul_type = vul_type
        self.level = level


class Result(Base):
    __tablename__ = "result"

    url = Column(Text, nullable=False)
    vul_type = Column(Enum(VulType, values_callable=lambda obj: VUL_TYPE_VALUES), ForeignKey('vul_level.vul_type'), nullable=False)
    payload = Column(Text, nullable=False)
    part = Column(Text, nullable=True)
    level = relationship("VulLevel", back_populates="results")

    __table_args__ = (
        PrimaryKeyConstraint('vul_type', 'payload', 'url', name='result_pk'),
    )

    def __init__(self, url, vul_type, payload, part):
        self.url = url
        self.vul_type = vul_type
        self.payload = payload
        self.part = part

    def as_dict(self):
        return {
            "url": self.url,
            "vul_type": self.vul_type.value,
            "payload": self.payload,
            "part": self.part,
            "level": self.level.level.value if self.level else None
        }



